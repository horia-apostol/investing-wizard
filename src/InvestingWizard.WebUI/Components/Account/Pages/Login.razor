@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using InvestingWizard.Application.Shared.Interfaces
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using InvestingWizard.Identity.Data.Models

@inject ILoggingService Logger
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@attribute [AllowAnonymous]

<PageTitle>Log in</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4 mx-auto">
        <div class="card shadow-sm p-4">
            <div class="card-header text-center">
                <h2>Log In</h2>
            </div>
            <div class="card-body">
                <StatusMessage Message="@errorMessage" />
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control form-control-sm" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control form-control-sm" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="checkbox mb-3">
                        <label class="form-label">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input custom-checkbox" />
                            Remember me
                        </label>
                    </div>
                    <div>
                        <button type="submit" class="btn btn-primary w-100 btn-sm">Log in</button>
                    </div>
                </EditForm>
            </div>
            <div class="card-footer text-center">
                <p>
                    <a href="Account/ForgotPassword">Forgot your password?</a>
                </p>
                <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                </p>
                <p>
                    <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                </p>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border: none;
        border-radius: 10px;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: none;
        padding: 20px 0;
    }

    .card-body {
        padding: 20px 30px;
    }

    .card-footer {
        background-color: #f8f9fa;
        border-top: none;
        padding: 20px 0;
    }

    .form-floating {
        position: relative;
    }

        .form-floating > .form-control {
            height: calc(2.5rem + 2px);
            padding: 0.5rem .75rem;
        }

        .form-floating > label {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            padding: 0.5rem .75rem;
            pointer-events: none;
            border: 1px solid transparent;
            border-radius: .25rem;
            transition: opacity .1s ease-in-out;
        }

        .form-floating > .form-control:focus + label,
        .form-floating > .form-control:not(:placeholder-shown) + label {
            opacity: .65;
            transform: scale(.85) translateY(-0.5rem) translateX(0.15rem);
        }

    .btn-primary {
        background-color: #2d323e;
        border-color: #2d323e;
        color: white;
        margin-right: 5px;
    }

        .btn-primary:hover {
            background-color: #1c1f26;
            border-color: #1c1f26;
        }

    .form-control:focus {
        border-color: #549DB8;
        box-shadow: 0 0 0 0.2rem rgba(84, 157, 184, 0.25);
    }

    .form-check-input:focus {
        border-color: #549DB8;
        box-shadow: 0 0 0 0.2rem rgba(84, 157, 184, 0.25);
    }

    .custom-checkbox:checked {
        background-color: #2d323e;
        border-color: #549DB8;
    }

    .custom-checkbox:focus {
        border-color: #549DB8;
        box-shadow: 0 0 0 0.2rem rgba(84, 157, 184, 0.25);
    }

    a {
        color: #549DB8;
    }

        a:hover {
            color: #1c1f26;
        }

        a:active {
            color: #1c1f26;
        }
</style>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            var user = await UserManager.FindByNameAsync(Input.Email);
            if (user != null)
            {
                Logger.LogInformation("User with id {UserId} logged in.", user.Id);
            }
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        public bool RememberMe { get; set; }
    }
}
