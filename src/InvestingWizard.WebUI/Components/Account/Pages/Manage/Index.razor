@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using InvestingWizard.Identity.Data.Models

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-sm p-4 mt-3">
            <div class="card-header text-center">
                <h2>Profile</h2>
            </div>
            <div class="card-body">
                <StatusMessage />
                <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <input type="text" value="@username" class="form-control form-control-sm" placeholder="Please choose your username." disabled />
                        <label for="username" class="form-label">Username</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.FirstName" class="form-control" placeholder="Please enter your first name." />
                        <label for="first-name" class="form-label">First Name</label>
                        <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.LastName" class="form-control" placeholder="Please enter your last name." />
                        <label for="last-name" class="form-label">Last Name</label>
                        <ValidationMessage For="() => Input.LastName" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.PreferredCurrencyCode" class="form-control" placeholder="Please enter your preferred currency code." />
                        <label for="first-name" class="form-label">Preferred Currency</label>
                        <ValidationMessage For="() => Input.PreferredCurrencyCode" class="text-danger" />
                    </div>
                    <button type="submit" class="btn btn-primary w-100 btn-sm">Save</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border: none;
        border-radius: 10px;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: none;
        padding: 20px 0;
    }

    .card-body {
        padding: 20px 30px;
    }

    .form-floating {
        position: relative;
    }

        .form-floating > .form-control {
            height: calc(2.5rem + 2px);
            padding: 0.5rem .75rem;
        }

        .form-floating > label {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            padding: 0.5rem .75rem;
            pointer-events: none;
            border: 1px solid transparent;
            border-radius: .25rem;
            transition: opacity .1s ease-in-out;
        }

        .form-floating > .form-control:focus + label,
        .form-floating > .form-control:not(:placeholder-shown) + label {
            opacity: .65;
            transform: scale(.85) translateY(-0.5rem) translateX(0.15rem);
        }

    .btn-primary {
        background-color: #2d323e;
        border-color: #2d323e;
        color: white;
        margin-right: 5px;
    }

        .btn-primary:hover {
            background-color: #1c1f26;
            border-color: #1c1f26;
        }

    .form-control:focus {
        border-color: #549DB8;
        box-shadow: 0 0 0 0.2rem rgba(84, 157, 184, 0.25);
    }

    .form-check-input:focus {
        border-color: #549DB8;
        box-shadow: 0 0 0 0.2rem rgba(84, 157, 184, 0.25);
    }

    a:focus, a:hover {
        color: #549DB8;
    }

    a:active {
        color: #1c1f26;
    }

    .btn {
        border-radius: 5px;
        font-size: 16px;
    }
</style>

@code {
    private ApplicationUser user = default!;
    private string? username;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);

        Input.FirstName ??= user.FirstName;
        Input.LastName ??= user.LastName;
        Input.PreferredCurrencyCode ??= user.PreferredCurrencyCode;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.FirstName != user.FirstName)
        {
            user.SetFirstName(Input.FirstName!);
        }

        if (Input.LastName != user.LastName)
        {
            user.SetLastName(Input.LastName!);
        }

        if (Input.PreferredCurrencyCode != user.PreferredCurrencyCode)
        {
            user.SetPreferredCurrencyCode(Input.PreferredCurrencyCode!);
        }

        var updateResult = await UserManager.UpdateAsync(user);

        if (!updateResult.Succeeded)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update profile information.", HttpContext);
            return;
        }
       

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First Name")]
        public string? FirstName { get; set; }

        [Required]
        [Display(Name = "Last Name")]
        public string? LastName { get; set; }

        [Required]
        [Display(Name = "Preferred Currency")]
        public string? PreferredCurrencyCode { get; set; }
    }
}
