@page "/Account/Manage/TwoFactorAuthentication"

@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity
@using InvestingWizard.Identity.Data.Models

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Two-factor authentication (2FA)</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-sm p-4 mt-3">
            <div class="card-header text-center">
                <h2>Two-factor authentication (2FA)</h2>
            </div>
            <div class="card-body">
                <StatusMessage />
                @if (canTrack)
                {
                    if (is2faEnabled)
                    {
                        if (recoveryCodesLeft == 0)
                        {
                            <div class="alert alert-danger">
                                <strong>You have no recovery codes left.</strong>
                                <p>You must <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a> before you can log in with a recovery code.</p>
                            </div>
                        }
                        else if (recoveryCodesLeft == 1)
                        {
                            <div class="alert alert-danger">
                                <strong>You have 1 recovery code left.</strong>
                                <p>You can <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
                            </div>
                        }
                        else if (recoveryCodesLeft <= 3)
                        {
                            <div class="alert alert-warning">
                                <strong>You have @recoveryCodesLeft recovery codes left.</strong>
                                <p>You should <a href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</a>.</p>
                            </div>
                        }

                        if (isMachineRemembered)
                        {
                            <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                                <AntiforgeryToken />
                                <button type="submit" class="btn btn-primary me-2">Forget this browser</button>
                            </form>
                        }

                        <a href="Account/Manage/Disable2fa" class="btn btn-primary me-2">Disable 2FA</a>
                        <a href="Account/Manage/GenerateRecoveryCodes" class="btn btn-danger">Reset recovery codes</a>
                    }

                    <h4>Authenticator app</h4>
                    @if (!hasAuthenticator)
                    {
                        <a href="Account/Manage/EnableAuthenticator" class="btn btn-primary me-2">Add authenticator app</a>
                    }
                    else
                    {
                        <a href="Account/Manage/EnableAuthenticator" class="btn btn-primary me-2">Set up authenticator app</a>
                        <a href="Account/Manage/ResetAuthenticator" class="btn btn-danger">Reset authenticator app</a>
                    }
                }
                else
                {
                    <div class="alert alert-danger">
                        <strong>Privacy and cookie policy have not been accepted.</strong>
                        <p>You must accept the policy before you can enable two factor authentication.</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border: none;
        border-radius: 10px;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: none;
        padding: 20px 0;
    }

    .card-body {
        padding: 20px 30px;
    }

    .form-floating {
        position: relative;
    }

        .form-floating > .form-control {
            height: calc(2.5rem + 2px);
            padding: 0.5rem .75rem;
        }

        .form-floating > label {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            padding: 0.5rem .75rem;
            pointer-events: none;
            border: 1px solid transparent;
            border-radius: .25rem;
            transition: opacity .1s ease-in-out;
        }

        .form-floating > .form-control:focus + label,
        .form-floating > .form-control:not(:placeholder-shown) + label {
            opacity: .65;
            transform: scale(.85) translateY(-0.5rem) translateX(0.15rem);
        }

    .btn-primary {
        background-color: #2d323e;
        border-color: #2d323e;
        color: white;
        margin-right: 5px;
    }

        .btn-primary:hover {
            background-color: #1c1f26;
            border-color: #1c1f26;
        }

    .form-control:focus {
        border-color: #549DB8;
        box-shadow: 0 0 0 0.2rem rgba(84, 157, 184, 0.25);
    }

    .form-check-input:focus {
        border-color: #549DB8;
        box-shadow: 0 0 0 0.2rem rgba(84, 157, 184, 0.25);
    }

    a:focus, a:hover {
        color: #549DB8;
    }

    a:active {
        color: #1c1f26;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
        }

    .btn {
        border-radius: 5px;
        font-size: 16px;
    }

    .me-2 {
        margin-right: .5rem;
    }
</style>

@code {
    private bool canTrack;
    private bool hasAuthenticator;
    private int recoveryCodesLeft;
    private bool is2faEnabled;
    private bool isMachineRemembered;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        hasAuthenticator = await UserManager.GetAuthenticatorKeyAsync(user) is not null;
        is2faEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(user);
        recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            "The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.",
            HttpContext);
    }
}
