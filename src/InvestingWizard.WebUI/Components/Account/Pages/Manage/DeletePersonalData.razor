@page "/Account/Manage/DeletePersonalData"

@using System.ComponentModel.DataAnnotations;
@using InvestingWizard.Application.Shared.Interfaces
@using Microsoft.AspNetCore.Identity;
@using InvestingWizard.Identity.Data.Models;

@inject ILoggingService Logger
@inject UserManager<ApplicationUser> UserManager;
@inject SignInManager<ApplicationUser> SignInManager;
@inject IdentityUserAccessor UserAccessor;
@inject IdentityRedirectManager RedirectManager;

<PageTitle>Delete Personal Data</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card shadow-sm p-4 mt-3">
            <div class="card-header text-center">
                <h2>Delete Personal Data</h2>
            </div>
            <div class="card-body">
                <StatusMessage Message="@message" />
                <div class="alert alert-warning" role="alert">
                    <p>
                        <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
                    </p>
                </div>
                <div>
                    <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" role="alert" />
                        @if (requirePassword)
                        {
                            <div class="form-floating mb-3">
                                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="Please enter your password." />
                                <label for="password" class="form-label">Password</label>
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
                            </div>
                        }
                        <button class="w-100 btn btn-danger" type="submit">Delete data and close my account</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border: none;
        border-radius: 10px;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: none;
        padding: 20px 0;
    }

    .card-body {
        padding: 20px 30px;
    }

    .form-floating {
        position: relative;
    }

        .form-floating > .form-control {
            height: calc(2.5rem + 2px);
            padding: 0.5rem .75rem;
        }

        .form-floating > label {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            padding: 0.5rem .75rem;
            pointer-events: none;
            border: 1px solid transparent;
            border-radius: .25rem;
            transition: opacity .1s ease-in-out;
        }

        .form-floating > .form-control:focus + label,
        .form-floating > .form-control:not(:placeholder-shown) + label {
            opacity: .65;
            transform: scale(.85) translateY(-0.5rem) translateX(0.15rem);
        }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

        .btn-danger:hover {
            background-color: #c82333;
            border-color: #bd2130;
        }

    .btn {
        border-radius: 5px;
        font-size: 16px;
    }
</style>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool requirePassword;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        requirePassword = await UserManager.HasPasswordAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        if (requirePassword && !await UserManager.CheckPasswordAsync(user, Input.Password))
        {
            message = "Error: Incorrect password.";
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel
    {
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";
    }
}
