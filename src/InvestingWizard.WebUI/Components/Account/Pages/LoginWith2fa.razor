@page "/Account/LoginWith2fa"

@using System.ComponentModel.DataAnnotations;
@using InvestingWizard.Application.Shared.Interfaces
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using InvestingWizard.Identity.Data.Models;

@inject ILoggingService Logger
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager

@attribute [AllowAnonymous]

<PageTitle>Two-factor authentication</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4 mx-auto">
        <div class="card shadow-sm p-4">
            <div class="card-header text-center">
                <h2>Two-factor authentication</h2>
            </div>
            <div class="card-body">
                <StatusMessage Message="@message" />
                <p>Your login is protected with an authenticator app. Enter your authenticator code below.</p>
                <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <input type="hidden" name="ReturnUrl" value="@ReturnUrl" />
                    <input type="hidden" name="RememberMe" value="@RememberMe" />
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.TwoFactorCode" class="form-control form-control-sm" autocomplete="off" />
                        <label for="two-factor-code" class="form-label">Authenticator code</label>
                        <ValidationMessage For="() => Input.TwoFactorCode" class="text-danger" />
                    </div>
                    <div class="checkbox mb-3">
                        <label for="remember-machine" class="form-label">
                            <InputCheckbox @bind-Value="Input.RememberMachine" class="form-check-input" />
                            Remember this machine
                        </label>
                    </div>
                    <div>
                        <button type="submit" class="btn btn-primary w-100 btn-sm">Log in</button>
                    </div>
                </EditForm>
            </div>
            <div class="card-footer text-center">
                <p>
                    Don't have access to your authenticator device? You can
                    <a href="Account/LoginWithRecoveryCode?ReturnUrl=@ReturnUrl">log in with a recovery code</a>.
                </p>
            </div>
        </div>
    </div>
</div>

<style>
    .card {
        border: none;
        border-radius: 10px;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: none;
        padding: 20px 0;
    }

    .card-body {
        padding: 20px 30px;
    }

    .card-footer {
        background-color: #f8f9fa;
        border-top: none;
        padding: 20px 0;
    }

    .form-floating {
        position: relative;
    }

        .form-floating > .form-control {
            height: calc(2.5rem + 2px);
            padding: 0.5rem .75rem;
        }

        .form-floating > label {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            padding: 0.5rem .75rem;
            pointer-events: none;
            border: 1px solid transparent;
            border-radius: .25rem;
            transition: opacity .1s ease-in-out;
        }

        .form-floating > .form-control:focus + label,
        .form-floating > .form-control:not(:placeholder-shown) + label {
            opacity: .65;
            transform: scale(.85) translateY(-0.5rem) translateX(0.15rem);
        }

    .btn-primary {
        background-color: #2d323e;
        border-color: #2d323e;
        color: white;
        margin-right: 5px;
    }

        .btn-primary:hover {
            background-color: #1c1f26;
            border-color: #549DB8;
        }

    .form-check-input:checked {
        background-color: #2d323e;
        border-color: #549DB8;
    }

    a {
        color: #549DB8;
    }

        a:hover {
            color: #1c1f26;
        }
</style>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }
}
