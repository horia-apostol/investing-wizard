@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using InvestingWizard.Application.Shared.Interfaces
@using InvestingWizard.Identity.Misc
@using InvestingWizard.Shared.Misc.Const
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using InvestingWizard.Identity.Data.Models

@inject ILoggingService Logging
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@attribute [AllowAnonymous]

<PageTitle>Register</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6 col-lg-4 mx-auto">
        <div class="card shadow-sm p-4">
            <div class="card-header text-center">
                <h2>Register</h2>
            </div>
            <div class="card-body">
                <StatusMessage Message="@Message" />
                <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control form-control-sm" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Email" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control form-control-sm" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control form-control-sm" autocomplete="new-password" aria-required="true" placeholder="password" />
                        <label for="confirm-password" class="form-label">Confirm Password</label>
                        <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                    </div>
                    <button type="submit" class="btn btn-primary w-100 btn-sm">Register</button>
                </EditForm>
            </div>
            <div class="card-footer text-center">
                <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Login", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Already have an account?</a>
                </p>
            </div>
        </div>
    </div>
</div>

<style>
    /* Include the updated styles here */
    .card {
        border: none;
        border-radius: 10px;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: none;
        padding: 20px 0;
    }

    .card-body {
        padding: 20px 30px;
    }

    .card-footer {
        background-color: #f8f9fa;
        border-top: none;
        padding: 20px 0;
    }

    .form-floating {
        position: relative;
    }

        .form-floating > .form-control {
            height: calc(2.5rem + 2px);
            padding: 0.5rem .75rem;
        }

        .form-floating > label {
            position: absolute;
            top: 0;
            left: 0;
            height: 100%;
            padding: 0.5rem .75rem;
            pointer-events: none;
            border: 1px solid transparent;
            border-radius: .25rem;
            transition: opacity .1s ease-in-out;
        }

        .form-floating > .form-control:focus + label,
        .form-floating > .form-control:not(:placeholder-shown) + label {
            opacity: .65;
            transform: scale(.85) translateY(-0.5rem) translateX(0.15rem);
        }

    .btn-primary {
        background-color: #2d323e;
        border-color: #2d323e;
        color: white;
        margin-right: 5px;
    }

        .btn-primary:hover {
            background-color: #1c1f26;
            border-color: #1c1f26;
        }

    .form-control:focus {
        border-color: #549DB8;
        box-shadow: 0 0 0 0.2rem rgba(84, 157, 184, 0.25);
    }

    .form-check-input:focus {
        border-color: #549DB8;
        box-shadow: 0 0 0 0.2rem rgba(84, 157, 184, 0.25);
    }

    a:focus, a:hover {
        color: #549DB8;
    }

    a:active {
        color: #1c1f26;
    }
</style>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        await UserManager.AddToRoleAsync(user, Roles.User);

        Logging.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("/Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> {
                { "userId", userId },
                { "code", code },
                { "returnUrl", ReturnUrl }
                });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "/Account/RegisterConfirmation",
                new Dictionary<string, object?> {
                    { "email", Input.Email },
                    { "returnUrl", ReturnUrl }
                    });
        }
        else
        {
            await SignInManager.SignInAsync(user, isPersistent: false);
            NavigationManager.NavigateTo(ReturnUrl ?? "/", forceLoad: true);
        }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
