@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations;
@using System.Text;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.WebUtilities;
@using InvestingWizard.Identity.Data.Models;

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager

@attribute [AllowAnonymous]

<PageTitle>Reset your password</PageTitle>



<h1>Reset your password</h1>
<h2>Enter your new password below.</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" method="post" FormName="reset-password-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <input type="hidden" @bind-value="Input.Code" />
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="New password" />
                <label for="password">New password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Confirm new password" />
                <label for="confirm-password">Confirm new password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-lg btn-primary">Reset</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public string? Code { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.TryGetValue("code", out var code))
        {
            Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(code!));
        }

        if (query.TryGetValue("email", out var email))
        {
            Input.Email = email!;
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user == null)
        {
            // Handle the error: user not found
            return;
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code!, Input.Password);
        if (result.Succeeded)
        {
            // Redirect the user to the reset password confirmation page
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }
        else
        {
            // Handle the errors from the result
            foreach (var error in result.Errors)
            {
                // Log or handle the error appropriately
                // ...
            }
        }
    }

    private class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "The password must be at least {2} and at max {1} characters long.")]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        public string? Code { get; set; }
    }
}
